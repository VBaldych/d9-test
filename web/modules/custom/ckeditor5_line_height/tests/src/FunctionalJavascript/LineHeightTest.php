<?php

namespace Drupal\Tests\ckeditor5_line_height\FunctionalJavascript;

use Drupal\editor\Entity\Editor;
use Drupal\filter\Entity\FilterFormat;
use Drupal\Tests\ckeditor5\FunctionalJavascript\CKEditor5TestBase;
use Symfony\Component\Validator\ConstraintViolation;
use Drupal\ckeditor5\Plugin\Editor\CKEditor5;

/**
 * @coversDefaultClass \Drupal\ckeditor5\Plugin\Editor\CKEditor5
 * @group ckeditor5
 * @internal
 */
class LineHeightTest extends CKEditor5TestBase {

  /**
   * {@inheritdoc}
   */
  protected static $modules = [
    'ckeditor5',
    'node',
    'text',
  ];

  protected function setUp(): void {
    parent::setUp(); // TODO: Change the autogenerated stub

    Editor::create([
      'editor' => 'ckeditor5',
      'format' => 'test_format',
      'settings' => [
        'toolbar' => [
          'items' => [
            'sourceEditing',
            'link',
            'lineHeight'
          ],
        ],
        'plugins' => [
          'ckeditor5_sourceEditing' => [
            'allowed_tags' => [],
          ],
          'lineHeight' => [
            'options' => [0.5, 1, 1.5, 2, 2.5, 3],
          ]
        ],
      ],
    ])->save();

    $this->assertSame([], array_map(
      function (ConstraintViolation $v) {
        return (string) $v->getMessage();
      },
      iterator_to_array(CKEditor5::validatePair(
        Editor::load('test_format'),
        FilterFormat::load('test_format')
      ))
    ));

    $this->host = $this->createNode([
      'type' => 'blog',
      'title' => 'Animals with strange names',
      'body' => [
        'value' => '<p>The pirate is pirate.</p><p style="line-height: 3">test</p>>',
        'format' => 'test_format',
      ],
    ]);
    $this->host->save();
  }

  /**
   * Integration test to ensure that CKEditor 5 UI plugin are loaded.
   *
   * @param int $option
   *   The line height value.
   */
  public function testLineHeight(int $option) : void {
    $page = $this->drupalGetNodeByTitle('Animals with strange names');

    $assert_session = $this->assertSession();

    $this->createNewTextFormat($page, $assert_session);
    $this->assertNotEmpty($assert_session->waitForElement('css', '.ckeditor5-toolbar-item-lineHeight'));
    $this->triggerKeyUp('.ckeditor5-toolbar-item-lineHeight', 'ArrowDown');
    $assert_session->assertWaitOnAjaxRequest();
    $this->saveNewTextFormat($page, $assert_session);

    $this->drupalGet('node/add');
    $this->assertNotEmpty($assert_session->waitForElement('css', '.ck-editor'));
    // Ensure that blockquote button is translated.
    $assert_session->elementExists('html', "//p[style=line-height: '$option']");
  }

}

